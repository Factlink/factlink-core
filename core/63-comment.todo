Tasks for commenting story:

 Keep a state when a user is typing his comment/evidence:
 ☐ Figure out what the best way to use local storage is (key is url like??) (gems/libraries)

Backend:
 ✔ comment object (Mongo) @done (12-11-20 17:49)
 ✔ include Mongoid::Timestamps @done (12-11-20 17:49)
 ✔ created_by (user) @done (12-11-20 17:49)
 ✔ comment field @done (12-11-20 17:49)
 ✔ parent_id (with index) @done (12-11-20 17:49)
 ✔ supporting / weakening (combined index with parent_id) @done (12-11-20 17:49)
 ✔ create @done (12-11-20 17:49)
 ✔ delete @done (12-11-20 18:33)
 ☐ retrieve, sorteren op created_at :asc, key :(parent_id (Fact) and opinion type (supporting, weakening

 Backbone / Frontend:
 ☐ create comment backbone model
 ☐ collection for Comments in discussion model (with static data at first)
 ☐ create mustache template for Comment
 ☐ create backbone view for Comment
 ☐ show Authority of user on TopFact, same as FactRelation "<username> <authority> added:"
 ☐ comment should be deletable: add delete button in PopoverView
 ☐ Integrate with backend (BACKEND TASK SHOULD BE DONE)
 ☐ toggle (checkbox) between posting Factlink or Comment
 ☐ save comment
 ☐ notification on successful posting (see design: singlefact-comment-success.png)
 ☐ notification on error
 ☐ store typed comment in localStorage and show when reopening the page

 Add activity (after backend is done):
  ☐ Add to create_listener as activity_for "GraphUser" (to create notification)
  ☐ Create templates and backbone views
