Tasks for commenting story:

 Keep a state when a user is typing his comment/evidence:
 ☐ Figure out what the best way to use local storage is (key is url like??) (gems/libraries)

Backend:
 ☐ comment object (Mongo)
 ☐ include Mongoid::Timestamps
 ☐ created_by (user)
 ☐ comment field
 ☐ parent_id (with index)
 ☐ supporting / weakening (combined index with parent_id)
 ☐ create
 ☐ delete
 ☐ retrieve, sorteren op created_at :asc, key :(parent_id (Fact) and opinion type (supporting, weakening

 Backbone / Frontend:
 ✔ create Comment Backbone model @done (12-11-20 14:08)
 ✔ collection for Comments in discussion model (with static data at first) @done (12-11-20 16:07)
 ✔ create basic Mustache template for Comment @done (12-11-20 16:07)
 ✔ create basic Backbone view for Comment @done (12-11-20 16:07)
 ☐ update _comment.mustache to have more content
 ☐ show Authority of User on TopFact, same as FactRelation "<username> <authority> added:"
 ☐ comment should be deletable: add delete button in PopoverView
 ☐ integrate with backend (BACKEND TASK SHOULD BE DONE)
 ☐ toggle (checkbox) between posting Factlink or Comment
 ☐ save comment
 ☐ notification on successful posting (see design: singlefact-comment-success.png)
 ☐ notification on error
 ☐ store typed comment in localStorage and show when reopening the page

 Add activity (after backend is done):
  ☐ Add to create_listener as activity_for "GraphUser" (to create notification)
  ☐ Create templates and backbone views
